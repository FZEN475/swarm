---
- name: Create swarm master
  community.docker.docker_swarm:
    state: present
    advertise_addr: "{{ ansible_default_ipv4.address }}:2377"
  register: swarm_tokens

- name: Create manager token
  ansible.builtin.copy:
    content: '{{ item.content }}'
    dest: '{{ item.dest }}'
    mode: '0644'
  with_items:
    - { content: '{{ swarm_tokens.swarm_facts.JoinTokens.Manager }}', dest: "/tmp/manager" }
    - { content: '{{ swarm_tokens.swarm_facts.JoinTokens.Worker }}', dest: "/tmp/worker" }

- name: Copy manager token to ansible
  ansible.builtin.fetch:
    src: "/tmp/{{ item }}"
    dest: /tmp/
    flat: true
  with_items:
    - "manager"
    - "worker"

- name: Create a network with custom IPAM config
  community.docker.docker_network:
    name: servers_network
    driver: overlay
    state: present
    ipam_config:
      - subnet: 192.168.5.0/24

- name: Download etcdctl
  ansible.builtin.get_url:
    url: "https://github.com/etcd-io/etcd/releases/download/v3.5.16/etcd-v3.5.16-linux-amd64.tar.gz"
    dest: "/tmp"
    mode: '0644'
  register: discovery

- name: Unarchived etcdctl
  ansible.builtin.unarchive:
    src: /tmp/etcd-v3.5.16-linux-amd64.tar.gz
    dest: /tmp
    remote_src: true

- name: Install etcdctl.
  ansible.builtin.copy:
    src: "/tmp/etcd-v3.5.16-linux-amd64/{{ item }}"
    dest: "/usr/bin/{{ item }}"
    remote_src: true
    mode: '0644'
  loop:
    - etcd
    - etcdctl
    - etcdutl

- name: Tmp_dns_names
  ansible.builtin.set_fact:
    dns_names: "{{ groups.control_all | map('regex_replace', '^(.*)$', 'DNS:\\1-etcd') | join(',') }}"

- name: Cert config for etcd and peers
  ansible.builtin.set_fact:
    cert_servers_conf_list: |
      {{ cert_servers_conf_list|default([]) + [
        { "path":"/etc/ssl/etcd/","name":loop_hostname,
          "key_usage":["digitalSignature"],"extended_key_usage":["serverAuth","clientAuth"],
          "subject_alt_name":"IP:127.0.0.1,IP:192.168.2.2," + dns_names + ",DNS:balancer"
        },
        { "path": "/etc/ssl/etcd/","name": (loop_hostname+"-peer"),
          "key_usage": [ "digitalSignature" ],"extended_key_usage": [ "serverAuth","clientAuth" ],
          "subject_alt_name": "IP:127.0.0.1,IP:192.168.2.2," + dns_names + ",DNS:balancer"
        }]
      }}
  loop: "{{ groups.control_all }}"
  loop_control:
    label: "{{ loop_hostname }}"
    loop_var: loop_hostname

- name: Add client and balancer certs configs
  ansible.builtin.set_fact:
    cert_all_conf_list: |
      {{ cert_servers_conf_list|default([]) + [
        { "path":"/etc/ssl/etcd/","name":"client",
          "key_usage":[ "keyEncipherment","dataEncipherment" ],"extended_key_usage":["clientAuth"],
          "subject_alt_name":""
        },
        { "path": "/etc/ssl/balancer/","name": "balancer",
          "key_usage": [ "digitalSignature" ],"extended_key_usage": [ "serverAuth","clientAuth" ],
          "subject_alt_name": "IP:127.0.0.1,IP:192.168.2.2," + dns_names + ",DNS:balancer"
        },
        { "path":"/etc/ssl/balancer/","name":"client",
          "key_usage":[ "keyEncipherment","dataEncipherment" ],"extended_key_usage":["clientAuth"],
          "subject_alt_name":""
        }]
      }}

- name: Create crts
  ansible.builtin.include_tasks: /source/playbooks/library/create_CA.yaml
  vars:
    ca: { "path":"/etc/ssl/etcd/","name":"ca_etcd" }
    list: "{{ cert_all_conf_list }}"
    renew: false

- name: Find balancer certs
  ansible.builtin.find:
    paths: /etc/ssl/balancer/
  register: certs

- name: Copy certs to ansible
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: /tmp/balancer/
    flat: true
  with_items: "{{ certs.files }}"

- name: Find etcd certs
  ansible.builtin.find:
    paths: /etc/ssl/etcd/
  register: certs

- name: Copy certs to ansible
  ansible.builtin.fetch:
    src: "{{ item.path }}"
    dest: /tmp/etcd/
    flat: true
  with_items: "{{ certs.files }}"

- name: Display paths of all .txt files in dir
  ansible.builtin.debug: msg={{ lookup('ansible.builtin.fileglob', '/tmp/etcd/*') }}

- name: Create local database dir.
  ansible.builtin.file:
    path: "/db/etcd/{{ inventory_hostname }}-etcd"
    state: directory
    mode: '0644'

- name: Create local balancer dir.
  ansible.builtin.file:
    path: "/etc/balancer"
    state: directory
    mode: '0644'

- name: Upload load-balancer.conf
  ansible.builtin.copy:
    src: "/source/config/load-balancer.conf"
    dest: "/etc/balancer/load-balancer.conf"
    mode: '0644'
